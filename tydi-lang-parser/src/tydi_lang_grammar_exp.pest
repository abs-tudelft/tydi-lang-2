//// Lex ////
LINE_COMMENT = _{ "//" ~  (!(NEWLINE | EOI) ~ ANY)* ~ (NEWLINE | EOI)}
BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ LINE_COMMENT | BLOCK_COMMENT }
WHITESPACE = _{ " " | "\t" | "\r" | "\n"}

//// Document ////
DOCUMENT_CONTENT = { (!"#" ~ ANY)* }
DOCUMENT = { ("#" ~ DOCUMENT_CONTENT ~ "#")+ }

//// Attribute ////
ATTRIBUTE = @{ "@" ~ ID }

//// Basic values ////
INT_RAW_NORAML = @{ ASCII_DIGIT  ~ (ASCII_DIGIT | "_")* ~ !(ASCII_DIGIT | "_")}
INT_RAW_HEX = @{ "0x" ~ ASCII_HEX_DIGIT  ~ (ASCII_HEX_DIGIT | "_")* ~ !(ASCII_HEX_DIGIT | "_")}
INT_RAW_BIN = @{ "0b" ~ ASCII_BIN_DIGIT  ~ (ASCII_BIN_DIGIT | "_")* ~ !(ASCII_BIN_DIGIT | "_")}
INT_RAW_OCT = @{ "0o" ~ ASCII_OCT_DIGIT  ~ (ASCII_OCT_DIGIT | "_")* ~ !(ASCII_OCT_DIGIT | "_")}
INT = { (INT_RAW_BIN | INT_RAW_OCT | INT_RAW_HEX | INT_RAW_NORAML) ~ !(ASCII_DIGIT | ".") }
BOOL = @{ ("true" | "false") ~ !(ASCII_ALPHA | ASCII_DIGIT | "_") }
FLOAT = @{ ('1'..'9' ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT*) | ("0" ~ "." ~ ASCII_DIGIT*) ~ !(ASCII_DIGIT) }
CHAR = @{ ' '..'!' | '#'..'[' | ']'..'~' | "\\\t" | "\\n" | "\\t" | "\\\\"}
STRING = @{ "\"" ~ CHAR* ~ "\"" }

//// ID ////
ID_BLOCK_LIST = { !(("impl" | "streamlet" | "const" | "int" | "str" | "bool" | "float" | "type" | "instance") ~ (WHITESPACE | EOI) )}
ID_BLOCK_CHAR = { !( WHITESPACE ) } //empty ID
ID = @{ ID_BLOCK_LIST ~ (ID_BLOCK_CHAR ~ ( ASCII_ALPHA | "_" )) ~ (ID_BLOCK_CHAR ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" ))*  ~ !(ASCII_ALPHA | ASCII_DIGIT | "_") }

//// Basic types ////
IntType = { "int" }
StringType = { "string" }
BoolType = { "bool" }
FloatType = { "float" }
ClockDomainType = { "clockdomain" }
BasicType = _{ IntType | StringType | BoolType | FloatType | ClockDomainType }

IntExp = { INT }
StringExp = { STRING }
BoolExp = { BOOL }
FloatExp = { FLOAT }

//// Expression ////
ArrayExp = { "{" ~ Exp ~ ("," ~ Exp)* ~ "}" }
ArrayRange = { "(" ~ Exp ~ "=" ~ Exp ~ "=>" ~ Exp ~ ")" }

IdentifierExp = { ID }
UnaryExp = { UnaryOp ~ Term }
UnaryOp = { OP_UnaryMinus | OP_UnaryNot  }
    OP_UnaryMinus = { "-" }
    OP_UnaryNot = { "!" }

FuncExp = { ID ~ "(" ~ (Exp ~ ( "," ~ Exp )*)? ~ ")" }
IndexExp = { ID ~ "[" ~ Exp ~ "]" }

Term = { ( "(" ~ Exp ~ ")" ) |
            FuncExp | IndexExp |
            ArrayRange | ArrayExp | IntExp | StringExp | BoolExp | FloatExp | IdentifierExp |
            UnaryExp }

Exp = { LogicalExp | (Term ~ (InfixOp  ~ Term)*) }
InfixOp = _{ OP_LeftShift | OP_RightShift | OP_LogicalAnd | OP_LogicalOr | 
    OP_LogicalEq | OP_LogicalNotEq | OP_GreaterEq | OP_LessEq |
    OP_AccessInner | OP_AccessProperty |
    OP_Greater | OP_Less | OP_Add | OP_Minus | OP_Multiply | OP_Divide | OP_Mod | OP_BitAnd | OP_BitOr }
        OP_LeftShift = { "<<" }
        OP_RightShift = { ">>" }
        OP_LogicalAnd = { "&&" }
        OP_LogicalOr = { "||" }
        OP_LogicalEq = { "==" }
        OP_LogicalNotEq = { "!=" }
        OP_GreaterEq = { ">=" }
        OP_LessEq = { "<=" }

        OP_AccessInner = { "." }
        OP_AccessProperty = { "->" }

        OP_Greater = { ">" }
        OP_Less = { "<" }
        OP_Add = { "+" }
        OP_Minus = { "-" }
        OP_Multiply = { "*" }
        OP_Divide = { "/" }
        OP_Mod = { "%" }
        OP_BitAnd = { "&" }
        OP_BitOr = { "|" }

//// Logical types ////
SubItem = _{ (StatementDeclare) }

LogicalNull = { "Null" }
LogicalBit = { "Bit" ~ "(" ~ Exp ~ ")" }
LogicalGroup = {
"Group" ~ ID ~ "{" ~
    SubItem* ~
"}"
}
LogicalUnion = {
"Union" ~ ID ~ "{" ~
    SubItem* ~
"}"
}

LogicalStream = { "Stream" ~ "(" ~ LogicalExp ~ StreamProperty* ~ ")" }
StreamProperty = { "," ~ ID ~ "=" ~ Exp }

LogicalType = { LogicalNull | LogicalBit | LogicalStream | LogicalGroup | LogicalUnion }
LogicalExp = _{ LogicalType }

//// Complex types ////
TypeIndicator_All = { BasicType | LogicalType }
TypeIndicator_Array = { "[" ~ TypeIndicator_Array ~ "]" }
TypeIndicator = _{ ( (":"  ~ TypeIndicator_All) | ( ":" ~ TypeIndicator_Array) )? }
ValueInitList = _{ ("=" ~ Exp)? }

//// Statement ////
StatementDeclare = { ID ~ TypeIndicator ~ ValueInitList ~ ";" }

//// File ////
PackageStatement = { "package" ~ ID ~ ";" }
NormalStatement = { Exp }
TydiFile = { SOI ~ PackageStatement ~ NormalStatement* ~ EOI }

